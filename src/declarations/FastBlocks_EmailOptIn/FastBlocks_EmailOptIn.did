type Validate = 
 variant {
   Err: text;
   Ok: text;
 };
type SupportedStandard = 
 record {
   name: text;
   url: text;
 };
type Result_2 = 
 variant {
   err: text;
   ok: vec text;
 };
type Result_1 = 
 variant {
   err: text;
   ok: nat;
 };
type Result = 
 variant {
   err: text;
   ok;
 };
type List = 
 opt record {
       text;
       List;
     };
type Icrc28TrustedOriginsResponse = record {trusted_origins: vec text;};
service : {
  acceptCycles: () -> ();
  availableCycles: () -> (nat) query;
  createEmailOptInAddress: (text) -> (Result);
  dumpOptInEmailAddress: () -> (text) query;
  getAdmins: () -> (Result_2) query;
  getCanisterVersion: () -> (text) query;
  getMaxMemorySize: () -> (nat) query;
  getMemorySize: () -> (nat) query;
  getPlatformOperators: () -> (List) query;
  icrc10_supported_standards: () -> (vec SupportedStandard) query;
  icrc28_trusted_origins: () -> (Icrc28TrustedOriginsResponse);
  isThereEnoughMemory: () -> (bool) query;
  registerAdmin: (text) -> (Result);
  registerPlatformOperator: (text) -> (Result);
  setMaxMemorySize: (nat) -> (Result_1);
  unregisterAdmin: (text) -> (Result);
  unregisterPlatformOperator: (text) -> (Result);
  validate: (reserved) -> (Validate);
}
