type Validate = 
 variant {
   Err: text;
   Ok: text;
 };
type UpdateCallsAggregatedData = vec nat64;
type Storage = 
 service {
   acceptCycles: () -> ();
   addWasmChunk: (blob) -> (Result_1);
   availableCycles: () -> (nat) query;
   collectCanisterMetrics: () -> ();
   getAdmins: () -> (Result_3) query;
   getAllDataCanisterIds: () -> (Result_4);
   getCanisterMetrics: (GetMetricsParameters) -> (opt CanisterMetrics) query;
   getCanisterVersion: () -> (text) query;
   getCgUsers: () -> (Result_3) query;
   getNewContentId: () -> (Result);
   getPlatformOperators: () -> (List) query;
   getWasmChunks: () -> (Result_2);
   idQuick: () -> (principal) query;
   registerAdmin: (text) -> (Result_1);
   registerCgUser: (text) -> (Result_1);
   registerPlatformOperator: (text) -> (Result_1);
   resetWasmChunks: () -> () oneway;
   retiredDataCanisterIdForWriting: (text) -> (Result_1);
   unregisterAdmin: (text) -> (Result_1);
   unregisterCgUser: (text) -> (Result_1);
   unregisterPlatformOperator: (text) -> (Result_1);
   upgradeAllBuckets: (text, vec nat8) -> (Result_1);
   upgradeBucket: (text, vec nat8) -> (Result_1);
   uploadBlob: (Content) -> (Result);
   validate: (reserved) -> (Validate);
 };
type Result_4 = 
 variant {
   err: text;
   ok: record {
         vec principal;
         vec text;
       };
 };
type Result_3 = 
 variant {
   err: text;
   ok: vec text;
 };
type Result_2 = 
 variant {
   err: text;
   ok: blob;
 };
type Result_1 = 
 variant {
   err: text;
   ok;
 };
type Result = 
 variant {
   err: text;
   ok: text;
 };
type NumericEntity = 
 record {
   avg: nat64;
   first: nat64;
   last: nat64;
   max: nat64;
   min: nat64;
 };
type MetricsGranularity = 
 variant {
   daily;
   hourly;
 };
type List = 
 opt record {
       text;
       List;
     };
type HourlyMetricsData = 
 record {
   canisterCycles: CanisterCyclesAggregatedData;
   canisterHeapMemorySize: CanisterHeapMemoryAggregatedData;
   canisterMemorySize: CanisterMemoryAggregatedData;
   timeMillis: int;
   updateCalls: UpdateCallsAggregatedData;
 };
type GetMetricsParameters = 
 record {
   dateFromMillis: nat;
   dateToMillis: nat;
   granularity: MetricsGranularity;
 };
type DailyMetricsData = 
 record {
   canisterCycles: NumericEntity;
   canisterHeapMemorySize: NumericEntity;
   canisterMemorySize: NumericEntity;
   timeMillis: int;
   updateCalls: nat64;
 };
type Content = 
 record {
   chunkData: blob;
   contentId: text;
   contentSize: nat;
   mimeType: text;
   offset: nat;
   totalChunks: nat;
 };
type CanisterMetricsData = 
 variant {
   daily: vec DailyMetricsData;
   hourly: vec HourlyMetricsData;
 };
type CanisterMetrics = record {data: CanisterMetricsData;};
type CanisterMemoryAggregatedData = vec nat64;
type CanisterHeapMemoryAggregatedData = vec nat64;
type CanisterCyclesAggregatedData = vec nat64;
service : () -> Storage
