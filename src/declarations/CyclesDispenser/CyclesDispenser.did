type Validate = 
 variant {
   Err: text;
   Ok: text;
 };
type TopUp = 
 record {
   amount: nat;
   balanceAfter: nat;
   balanceBefore: nat;
   canisterId: text;
   time: int;
 };
type TimeRange = 
 variant {
   day: nat;
   hour: nat;
 };
type Result_4 = 
 variant {
   err: text;
   ok: RegisteredCanister;
 };
type Result_3 = 
 variant {
   err: text;
   ok: TopUp;
 };
type Result_2 = 
 variant {
   err: text;
   ok: vec text;
 };
type Result_1 = 
 variant {
   err: text;
   ok: nat;
 };
type Result = 
 variant {
   err: text;
   ok;
 };
type RegisteredCanister = 
 record {
   balance: nat;
   canisterId: text;
   isStorageBucket: bool;
   minimumThreshold: nat;
   topUpAmount: nat;
   topUps: vec TopUp;
 };
type List = 
 opt record {
       text;
       List;
     };
type AddCanisterModel = 
 record {
   canisterId: text;
   isStorageBucket: bool;
   minimumThreshold: nat;
   topUpAmount: nat;
 };
service : {
  acceptCycles: () -> ();
  addCanister: (AddCanisterModel) -> (Result_4);
  availableCycles: () -> (nat) query;
  batchRegisterAdmin: (principal) -> (Result_2);
  batchRegisterPlatformOperator: (principal) -> (Result_2);
  batchUnregisterAdmin: (principal) -> (Result_2);
  batchUnregisterPlatformOperator: (principal) -> (Result_2);
  checkAllRegisteredCanisters: () -> (Result);
  checkRegisteredCanister: (text) -> (Result_3);
  checkStorageBucketCanisters: () -> ();
  getAdmins: () -> (Result_2) query;
  getAllRegisteredCanisters: () -> (vec RegisteredCanister) query;
  getAllTopUps: () -> (vec TopUp) query;
  getCanisterVersion: () -> (text) query;
  getCgUsers: () -> (Result_2) query;
  getCyclesDispenserMinimumValue: () -> (nat) query;
  getLatestTimerCall: () -> (text, text) query;
  getMaxMemorySize: () -> (nat) query;
  getMemorySize: () -> (nat) query;
  getPlatformOperators: () -> (List) query;
  getRegisteredCanister: (text) -> (Result_4) query;
  getStatus: () -> (text) query;
  getTopUp: (text) -> (Result_3) query;
  getTopUpsByRange: (TimeRange) -> (vec TopUp) query;
  getTrustedCanisters: () -> (Result_2) query;
  idQuick: () -> (principal) query;
  isThereEnoughMemory: () -> (bool) query;
  registerAdmin: (text) -> (Result);
  registerCanister: (text) -> (Result);
  registerCgUser: (text) -> (Result);
  registerPlatformOperator: (text) -> (Result);
  removeCanister: (text) -> (Result);
  setMaxMemorySize: (nat) -> (Result_1);
  unregisterAdmin: (text) -> (Result);
  unregisterCanister: (text) -> (Result);
  unregisterCgUser: (text) -> (Result);
  unregisterPlatformOperator: (text) -> (Result);
  validate: (reserved) -> (Validate);
}
