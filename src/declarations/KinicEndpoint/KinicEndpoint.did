type UpdateCallsAggregatedData = vec nat64;
type Result_2 = 
 variant {
   err: text;
   ok: vec text;
 };
type Result_1 = 
 variant {
   err: text;
   ok: nat;
 };
type Result = 
 variant {
   err: text;
   ok;
 };
type NumericEntity = 
 record {
   avg: nat64;
   first: nat64;
   last: nat64;
   max: nat64;
   min: nat64;
 };
type MetricsGranularity = 
 variant {
   daily;
   hourly;
 };
type KinicReturn = 
 variant {
   err: text;
   ok: vec text;
 };
type HourlyMetricsData = 
 record {
   canisterCycles: CanisterCyclesAggregatedData;
   canisterHeapMemorySize: CanisterHeapMemoryAggregatedData;
   canisterMemorySize: CanisterMemoryAggregatedData;
   timeMillis: int;
   updateCalls: UpdateCallsAggregatedData;
 };
type GetMetricsParameters = 
 record {
   dateFromMillis: nat;
   dateToMillis: nat;
   granularity: MetricsGranularity;
 };
type DailyMetricsData = 
 record {
   canisterCycles: NumericEntity;
   canisterHeapMemorySize: NumericEntity;
   canisterMemorySize: NumericEntity;
   timeMillis: int;
   updateCalls: nat64;
 };
type CanisterMetricsData = 
 variant {
   daily: vec DailyMetricsData;
   hourly: vec HourlyMetricsData;
 };
type CanisterMetrics = record {data: CanisterMetricsData;};
type CanisterMemoryAggregatedData = vec nat64;
type CanisterHeapMemoryAggregatedData = vec nat64;
type CanisterCyclesAggregatedData = vec nat64;
service : {
  acceptCycles: () -> ();
  availableCycles: () -> (nat) query;
  collectCanisterMetrics: () -> ();
  getAdmins: () -> (Result_2) query;
  getCanisterMetrics: (GetMetricsParameters) -> (opt CanisterMetrics) query;
  getCgUsers: () -> (Result_2) query;
  getKinicUrlList: () -> (KinicReturn);
  getMaxMemorySize: () -> (nat) query;
  getMemorySize: () -> (nat) query;
  getTrustedPrincipals: () -> (Result_2) query;
  isThereEnoughMemory: () -> (bool) query;
  registerAdmin: (text) -> (Result);
  registerCgUser: (text) -> (Result);
  registerPrincipal: (text) -> (Result);
  setMaxMemorySize: (nat) -> (Result_1);
  unregisterAdmin: (text) -> (Result);
  unregisterCgUser: (text) -> (Result);
  unregisterPrincipal: (text) -> (Result);
}
