type Validate = 
 variant {
   Err: text;
   Ok: text;
 };
type UserPostCounts = 
 record {
   draftCount: text;
   handle: text;
   publishedCount: text;
   totalPostCount: text;
   totalViewCount: text;
   uniqueClaps: text;
   uniqueReaderCount: text;
 };
type TagModel = 
 record {
   createdDate: text;
   id: text;
   value: text;
 };
type Rule = 
 record {
   description: text;
   id: text;
 };
type Result_9 = 
 variant {
   err: text;
   ok: vec record {
             text;
             text;
           };
 };
type Result_8 = 
 variant {
   err: text;
   ok: TagModel;
 };
type Result_7 = 
 variant {
   err: text;
   ok: vec text;
 };
type Result_6 = 
 variant {
   err: text;
   ok: blob;
 };
type Result_5 = 
 variant {
   err: text;
   ok: PostKeyProperties;
 };
type Result_4 = 
 variant {
   err: text;
   ok: vec Result_5;
 };
type Result_3 = 
 variant {
   err: text;
   ok: Post;
 };
type Result_2 = 
 variant {
   err: text;
   ok: nat;
 };
type Result_1 = 
 variant {
   err: text;
   ok: text;
 };
type Result = 
 variant {
   err: text;
   ok;
 };
type RecallOptions = 
 variant {
   allTime;
   ninetydays;
   sixtydays;
   thisMonth;
   thisWeek;
   thisYear;
   today;
 };
type PostTagModel__1 = 
 record {
   tagId: text;
   tagName: text;
 };
type PostTagModel = 
 record {
   tagId: text;
   tagName: text;
 };
type PostTag = 
 record {
   createdDate: int;
   isActive: bool;
   modifiedDate: int;
   tagId: text;
 };
type PostSaveModel = 
 record {
   category: text;
   content: text;
   creator: text;
   headerImage: text;
   isDraft: bool;
   isPremium: bool;
   isPublication: bool;
   postId: text;
   subtitle: text;
   tagIds: vec text;
   title: text;
 };
type PostModerationStatus = 
 variant {
   approved;
   rejected;
   reviewRequired;
 };
type PostKeyProperties__1 = 
 record {
   bucketCanisterId: text;
   category: text;
   claps: text;
   created: text;
   handle: text;
   isDraft: bool;
   modified: text;
   postId: text;
   "principal": text;
   publishedDate: text;
   tags: vec PostTagModel;
   views: text;
 };
type PostKeyProperties = 
 record {
   bucketCanisterId: text;
   category: text;
   claps: text;
   created: text;
   handle: text;
   isDraft: bool;
   modified: text;
   postId: text;
   "principal": text;
   publishedDate: text;
   tags: vec PostTagModel;
   views: text;
 };
type Post = 
 record {
   bucketCanisterId: text;
   category: text;
   claps: text;
   content: text;
   created: text;
   creator: text;
   handle: text;
   headerImage: text;
   isDraft: bool;
   isPremium: bool;
   isPublication: bool;
   modified: text;
   postId: text;
   publishedDate: text;
   subtitle: text;
   tags: vec PostTagModel;
   title: text;
   url: text;
   views: text;
   wordCount: text;
 };
type PopularityType = 
 variant {
   ever;
   month;
   today;
   week;
 };
type NftCanisterEntry = 
 record {
   canisterId: text;
   handle: text;
 };
type List = 
 opt record {
       text;
       List;
     };
type GetPostsByFollowers = 
 record {
   posts: vec PostKeyProperties__1;
   totalCount: text;
 };
type ContentStatus = 
 variant {
   approved;
   rejected;
   reviewRequired;
 };
type ContentResult = 
 record {
   sourceId: text;
   status: ContentStatus;
 };
service : {
  acceptCycles: () -> ();
  addCanisterToCyclesDispenser: (text, nat, nat) -> (Result);
  addNewRules: (vec text) -> ();
  addPostCategory: (text, text, int) -> ();
  addWasmChunk: (blob) -> (Result);
  availableCycles: () -> (nat) query;
  checkViewsLast24Hours: () -> ();
  clapPost: (text) -> () oneway;
  copyPublicationCanisters: (text) -> (Result_9);
  copyTrustedCanisters: (text) -> (Result_7);
  createNewBucketCanister: () -> (Result_1);
  createTag: (text) -> (Result_8);
  currentId: () -> (nat) query;
  debugGetModeration: () -> (vec record {
                                   text;
                                   nat;
                                 },
   vec record {
         text;
         PostModerationStatus;
       }) query;
  delete: (text) -> (Result_2);
  deletePostFromUserDebug: (text, text) -> (Result_7);
  deleteUserPosts: (text) -> (Result_2);
  dumpIds: () -> (Result);
  dumpPosts: () -> (Result);
  dumpUserIds: () -> (Result);
  followTag: (text) -> (Result);
  generateLatestPosts: () -> ();
  generatePublishedDates: () -> ();
  getActiveBucketCanisterId: () -> (Result_1);
  getAdmins: () -> (Result_7) query;
  getAllBuckets: () -> (Result_7);
  getAllTags: () -> (vec TagModel) query;
  getBucketCanisterIdsOfGivenHandles: (vec text) -> (vec text) query;
  getBucketCanisters: () -> (vec record {
                                   text;
                                   text;
                                 }) query;
  getCanisterVersion: () -> (text) query;
  getCgUsers: () -> (Result_7) query;
  getFrontendCanisterId: () -> (Result_1) query;
  getKinicList: () -> (Result_7);
  getLatestPosts: (nat32, nat32) -> (GetPostsByFollowers) query;
  getLatestTimerCall: () -> (text, text) query;
  getList: (vec text) -> (vec PostKeyProperties) query;
  getMaxMemorySize: () -> (nat) query;
  getMemorySize: () -> (nat) query;
  getMoreLatestPosts: (nat32, nat32) -> (vec PostKeyProperties) query;
  getMyDailyPostsStatus: () -> (bool) query;
  getMyPosts: (bool, bool, nat32, nat32) -> (vec PostKeyProperties) query;
  getMyTags: () -> (vec PostTagModel__1) query;
  getNextPostId: () -> (Result_1);
  getNftCanisters: () -> (vec NftCanisterEntry) query;
  getPlatformOperators: () -> (List) query;
  getPopular: (nat32, nat32) -> (GetPostsByFollowers) query;
  getPopularThisMonth: (nat32, nat32) -> (GetPostsByFollowers) query;
  getPopularThisWeek: (nat32, nat32) -> (GetPostsByFollowers) query;
  getPopularToday: (nat32, nat32) -> (GetPostsByFollowers) query;
  getPostKeyProperties: (text) -> (Result_5) query;
  getPostUrls: () -> (Result_1);
  getPostViewsPerHourLast24Hours: () -> (nat, vec record {
                                                    nat;
                                                    nat;
                                                  }) query;
  getPostsByCategory: (text, text, nat32, nat32) ->
   (GetPostsByFollowers) query;
  getPostsByFollowers: (vec text, nat32, nat32) ->
   (GetPostsByFollowers) query;
  getPostsByPostIds: (vec text) -> (vec PostKeyProperties) query;
  getPostsPerHourLast24Hours: () -> (nat, vec record {
                                                int;
                                                nat;
                                              }) query;
  getPublicationCanisters: () -> (vec record {
                                        text;
                                        text;
                                      }) query;
  getRegisteredRules: () -> (vec Rule);
  getTagsByUser: (text) -> (vec PostTag) query;
  getTotalArticleViews: () -> (nat) query;
  getTotalClaps: () -> (nat) query;
  getTotalPostCount: () -> (nat) query;
  getTrustedCanisters: () -> (Result_7) query;
  getUserDailyAllowedPostNumber: () -> (nat) query;
  getUserPostCounts: (text) -> (UserPostCounts) query;
  getUserPostIds: (text) -> (Result_7) query;
  getUserPosts: (text) -> (vec PostKeyProperties) query;
  getViewsByRange: (RecallOptions) -> (int);
  getWasmChunks: () -> (Result_6);
  handleModclubMigration: (text) -> (Result_1);
  idQuick: () -> (principal) query;
  indexPopular: () -> ();
  initializeCanister: (text, text, text) -> (Result_1);
  initializePostCoreCanister: () -> (Result_1);
  isThereEnoughMemory: () -> (bool) query;
  makePostPublication: (text, text, text, bool) -> ();
  migratePostsFromOldPostCanister: (text, nat, nat) -> (Result_4);
  modClubCallback: (ContentResult) -> () oneway;
  modClubCallbackDebug: (ContentResult) -> (text);
  registerAdmin: (text) -> (Result);
  registerCanister: (text) -> (Result);
  registerCgUser: (text) -> (Result);
  registerNftCanisterId: (text, text) -> (Result_1);
  registerPlatformOperator: (text) -> (Result);
  registerPublisher: () -> ();
  reindex: () -> (Result_1);
  removeExistingRules: (vec text) -> ();
  resetWasmChunks: () -> () oneway;
  save: (PostSaveModel) -> (Result_3);
  setFrontendCanisterId: (text) -> (Result_1);
  setMaxMemorySize: (nat) -> (Result_2);
  setUpModClub: (text) -> () oneway;
  setUserDailyAllowedPostNumber: (nat) -> (Result_2);
  simulateModClub: (text, PostModerationStatus) -> ();
  sortPopularPosts: (PopularityType) -> ();
  storeAllSEO: () -> (Result);
  testInstructionSize: () -> (text);
  unfollowTag: (text) -> (Result);
  unregisterAdmin: (text) -> (Result);
  unregisterCanister: (text) -> (Result);
  unregisterCgUser: (text) -> (Result);
  unregisterPlatformOperator: (text) -> (Result);
  updateHandle: (text, text) -> (Result_1);
  updatePostDraft: (text, bool, int, text) -> (PostKeyProperties);
  upgradeAllBuckets: (text, vec nat8) -> (Result);
  upgradeBucket: (text, vec nat8) -> (Result);
  validate: (reserved) -> (Validate);
  viewPost: (text) -> () oneway;
}
