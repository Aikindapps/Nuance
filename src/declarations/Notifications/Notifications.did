type UserNotificationSettings = 
 record {
   authorGainsNewSubscriber: bool;
   authorLosesSubscriber: bool;
   faucetClaimAvailable: bool;
   newArticleByFollowedTag: bool;
   newArticleByFollowedWriter: bool;
   newCommentOnMyArticle: bool;
   newFollower: bool;
   premiumArticleSold: bool;
   readerExpiredSubscription: bool;
   replyToMyComment: bool;
   tipReceived: bool;
   verifyProfile: bool;
   youSubscribedToAuthor: bool;
   youUnsubscribedFromAuthor: bool;
 };
type SubscriptionTimeInterval = 
 variant {
   Annually;
   LifeTime;
   Monthly;
   Weekly;
 };
type Result_2 = 
 variant {
   err: text;
   ok: vec text;
 };
type Result_1 = 
 variant {
   err: text;
   ok: nat;
 };
type Result = 
 variant {
   err: text;
   ok: UserNotificationSettings;
 };
type NotificationContent__1 = 
 variant {
   AuthorGainsNewSubscriber:
    record {
      amountOfTokens: text;
      subscriberPrincipalId: text;
      subscriptionEndTime: text;
      subscriptionStartTime: text;
      subscriptionTimeInterval: SubscriptionTimeInterval;
    };
   AuthorLosesSubscriber:
    record {
      subscriberPrincipalId: text;
      subscriptionTimeInterval: SubscriptionTimeInterval;
    };
   FaucetClaimAvailable;
   NewArticleByFollowedTag:
    record {
      bucketCanisterId: text;
      postId: text;
      postTitle: text;
      postWriterPrincipal: text;
      tagName: text;
    };
   NewArticleByFollowedWriter:
    record {
      bucketCanisterId: text;
      postId: text;
      postTitle: text;
      postWriterPrincipal: text;
    };
   NewCommentOnMyArticle:
    record {
      bucketCanisterId: text;
      commentContent: text;
      commentId: text;
      commenterPrincipal: text;
      isReply: bool;
      postId: text;
      postTitle: text;
    };
   NewFollower: record {followerPrincipalId: text;};
   PremiumArticleSold:
    record {
      amountOfTokens: text;
      bucketCanisterId: text;
      postId: text;
      postTitle: text;
      publicationPrincipalId: opt text;
      purchasedTokenSymbol: text;
      purchaserPrincipal: text;
    };
   ReaderExpiredSubscription:
    record {
      amountOfTokens: text;
      isPublication: bool;
      subscribedWriterPrincipalId: text;
      subscriptionEndTime: text;
      subscriptionStartTime: text;
      subscriptionTimeInterval: SubscriptionTimeInterval;
    };
   ReplyToMyComment:
    record {
      bucketCanisterId: text;
      myCommentContent: text;
      myCommentId: text;
      postId: text;
      postTitle: text;
      postWriterPrincipal: text;
      replyCommentContent: text;
      replyCommentId: text;
      replyCommenterPrincipal: text;
    };
   TipReceived:
    record {
      amountOfTokens: text;
      bucketCanisterId: text;
      numberOfApplauds: text;
      postId: text;
      postTitle: text;
      publicationPrincipalId: opt text;
      tipSenderPrincipal: text;
      tippedTokenSymbol: text;
    };
   VerifyProfile;
   YouSubscribedToAuthor:
    record {
      amountOfTokens: text;
      isPublication: bool;
      subscribedWriterPrincipalId: text;
      subscriptionEndTime: text;
      subscriptionStartTime: text;
      subscriptionTimeInterval: SubscriptionTimeInterval;
    };
   YouUnsubscribedFromAuthor:
    record {
      isPublication: bool;
      subscribedWriterPrincipalId: text;
      subscriptionTimeInterval: SubscriptionTimeInterval;
    };
 };
type NotificationContent = 
 variant {
   AuthorGainsNewSubscriber:
    record {
      amountOfTokens: text;
      subscriberPrincipalId: text;
      subscriptionEndTime: text;
      subscriptionStartTime: text;
      subscriptionTimeInterval: SubscriptionTimeInterval;
    };
   AuthorLosesSubscriber:
    record {
      subscriberPrincipalId: text;
      subscriptionTimeInterval: SubscriptionTimeInterval;
    };
   FaucetClaimAvailable;
   NewArticleByFollowedTag:
    record {
      bucketCanisterId: text;
      postId: text;
      postTitle: text;
      postWriterPrincipal: text;
      tagName: text;
    };
   NewArticleByFollowedWriter:
    record {
      bucketCanisterId: text;
      postId: text;
      postTitle: text;
      postWriterPrincipal: text;
    };
   NewCommentOnMyArticle:
    record {
      bucketCanisterId: text;
      commentContent: text;
      commentId: text;
      commenterPrincipal: text;
      isReply: bool;
      postId: text;
      postTitle: text;
    };
   NewFollower: record {followerPrincipalId: text;};
   PremiumArticleSold:
    record {
      amountOfTokens: text;
      bucketCanisterId: text;
      postId: text;
      postTitle: text;
      publicationPrincipalId: opt text;
      purchasedTokenSymbol: text;
      purchaserPrincipal: text;
    };
   ReaderExpiredSubscription:
    record {
      amountOfTokens: text;
      isPublication: bool;
      subscribedWriterPrincipalId: text;
      subscriptionEndTime: text;
      subscriptionStartTime: text;
      subscriptionTimeInterval: SubscriptionTimeInterval;
    };
   ReplyToMyComment:
    record {
      bucketCanisterId: text;
      myCommentContent: text;
      myCommentId: text;
      postId: text;
      postTitle: text;
      postWriterPrincipal: text;
      replyCommentContent: text;
      replyCommentId: text;
      replyCommenterPrincipal: text;
    };
   TipReceived:
    record {
      amountOfTokens: text;
      bucketCanisterId: text;
      numberOfApplauds: text;
      postId: text;
      postTitle: text;
      publicationPrincipalId: opt text;
      tipSenderPrincipal: text;
      tippedTokenSymbol: text;
    };
   VerifyProfile;
   YouSubscribedToAuthor:
    record {
      amountOfTokens: text;
      isPublication: bool;
      subscribedWriterPrincipalId: text;
      subscriptionEndTime: text;
      subscriptionStartTime: text;
      subscriptionTimeInterval: SubscriptionTimeInterval;
    };
   YouUnsubscribedFromAuthor:
    record {
      isPublication: bool;
      subscribedWriterPrincipalId: text;
      subscriptionTimeInterval: SubscriptionTimeInterval;
    };
 };
type Notification = 
 record {
   content: NotificationContent;
   id: text;
   notificationReceiverPrincipalId: text;
   read: bool;
   timestamp: text;
 };
type GetUserNotificationsResponse = 
 record {
   notifications: vec Notification;
   totalCount: text;
 };
service : {
  acceptCycles: () -> ();
  availableCycles: () -> (nat) query;
  broadcastNotification: (NotificationContent__1) -> (Result_2);
  createNotification: (text, NotificationContent__1) -> ();
  createNotifications: (vec record {
                              text;
                              NotificationContent__1;
                            }) -> ();
  getCanisterVersion: () -> (text) query;
  getMaxMemorySize: () -> (nat) query;
  getMemorySize: () -> (nat) query;
  getUserNotificationSettings: () -> (UserNotificationSettings) query;
  getUserNotifications: (text, text) -> (GetUserNotificationsResponse) query;
  isThereEnoughMemory: () -> (bool) query;
  markNotificationsAsRead: (vec text) -> ();
  setMaxMemorySize: (nat) -> (Result_1);
  updateNotificationSettings: (UserNotificationSettings) -> (Result);
}
