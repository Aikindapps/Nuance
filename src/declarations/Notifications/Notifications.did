type UserNotificationSettings = 
 record {
   authorExpiredSubscription: bool;
   authorGainsNewSubscriber: bool;
   authorLosesSubscriber: bool;
   expiredSubscription: bool;
   faucetClaimAvailable: bool;
   newArticleByFollowedTag: bool;
   newArticleByFollowedWriter: bool;
   newCommentOnFollowedArticle: bool;
   newCommentOnMyArticle: bool;
   newFollower: bool;
   premiumArticleSold: bool;
   readerExpiredSubscription: bool;
   tipReceived: bool;
   youSubscribedToAuthor: bool;
   youUnsubscribedFromAuthor: bool;
 };
type UpdateCallsAggregatedData = vec nat64;
type Result_4 = 
 variant {
   err: text;
   ok: vec text;
 };
type Result_3 = 
 variant {
   err: text;
   ok: UserNotificationSettings;
 };
type Result_2 = 
 variant {
   err: text;
   ok: record {
         vec Notifications;
         nat;
       };
 };
type Result_1 = 
 variant {
   err: text;
   ok: nat;
 };
type Result = 
 variant {
   err: text;
   ok;
 };
type NumericEntity = 
 record {
   avg: nat64;
   first: nat64;
   last: nat64;
   max: nat64;
   min: nat64;
 };
type Notifications = 
 record {
   content: NotificationContent__1;
   id: text;
   notificationType: NotificationType;
   read: bool;
   timestamp: text;
 };
type NotificationType__1 = 
 variant {
   AuthorExpiredSubscription;
   AuthorGainsNewSubscriber;
   AuthorLosesSubscriber;
   FaucetClaimAvailable;
   NewArticleByFollowedTag;
   NewArticleByFollowedWriter;
   NewCommentOnFollowedArticle;
   NewCommentOnMyArticle;
   NewFollower;
   PremiumArticleSold;
   ReaderExpiredSubscription;
   TipReceived;
   UnknownNotificationType;
   YouSubscribedToAuthor;
   YouUnsubscribedFromAuthor;
 };
type NotificationType = 
 variant {
   AuthorExpiredSubscription;
   AuthorGainsNewSubscriber;
   AuthorLosesSubscriber;
   FaucetClaimAvailable;
   NewArticleByFollowedTag;
   NewArticleByFollowedWriter;
   NewCommentOnFollowedArticle;
   NewCommentOnMyArticle;
   NewFollower;
   PremiumArticleSold;
   ReaderExpiredSubscription;
   TipReceived;
   UnknownNotificationType;
   YouSubscribedToAuthor;
   YouUnsubscribedFromAuthor;
 };
type NotificationContent__1 = 
 variant {
   AuthorExpiredSubscriptionNotificationContent:
    record {
      authorPrincipal: principal;
      subscriberPrincipal: principal;
      time: text;
    };
   AuthorGainsNewSubscriberNotificationContent:
    record {
      authorPrincipal: principal;
      subscriberPrincipal: principal;
      time: text;
    };
   AuthorLosesSubscriberNotificationContent:
    record {
      authorPrincipal: principal;
      subscriberPrincipal: principal;
      time: text;
    };
   CommentNotificationContent:
    record {
      articleId: text;
      articleTitle: text;
      authorPrincipal: principal;
      comment: text;
      commenterPrincipal: principal;
      isAuthorPublication: bool;
      isReply: bool;
      tags: vec text;
      url: text;
    };
   FaucetClaimAvailableNotificationContent:
    record {receiverPrincipal: principal;};
   NewArticleNotificationContent:
    record {
      articleId: text;
      articleTitle: text;
      authorPrincipal: principal;
      isAuthorPublication: bool;
      tags: vec text;
      url: text;
    };
   NewFollowerNotificationContent:
    record {
      authorPrincipal: principal;
      followerPrincipal: principal;
      followerUrl: text;
    };
   PostNotificationContent:
    record {
      articleId: text;
      articleTitle: text;
      authorPrincipal: principal;
      isAuthorPublication: bool;
      receiverPrincipal: principal;
      tags: vec text;
      url: text;
    };
   PremiumArticleSoldNotificationContent:
    record {
      articleId: text;
      articleTitle: text;
      authorPrincipal: principal;
      isAuthorPublication: bool;
      purchaserPrincipal: principal;
      url: text;
    };
   ReaderExpiredSubscriptionNotificationContent:
    record {
      authorPrincipal: principal;
      subscriberPrincipal: principal;
      time: text;
    };
   TipRecievedNotificationContent:
    record {
      articleId: text;
      articleTitle: text;
      postUrl: text;
      receiverPrincipal: principal;
      recieverIsPublication: bool;
      senderPrincipal: principal;
      tipAmount: text;
      token: text;
    };
   YouSubscribedToAuthorNotificationContent:
    record {
      authorPrincipal: principal;
      subscriberPrincipal: principal;
      time: text;
    };
   YouUnsubscribedFromAuthorNotificationContent:
    record {
      authorPrincipal: principal;
      subscriberPrincipal: principal;
      time: text;
    };
 };
type NotificationContent = 
 variant {
   AuthorExpiredSubscriptionNotificationContent:
    record {
      authorPrincipal: principal;
      subscriberPrincipal: principal;
      time: text;
    };
   AuthorGainsNewSubscriberNotificationContent:
    record {
      authorPrincipal: principal;
      subscriberPrincipal: principal;
      time: text;
    };
   AuthorLosesSubscriberNotificationContent:
    record {
      authorPrincipal: principal;
      subscriberPrincipal: principal;
      time: text;
    };
   CommentNotificationContent:
    record {
      articleId: text;
      articleTitle: text;
      authorPrincipal: principal;
      comment: text;
      commenterPrincipal: principal;
      isAuthorPublication: bool;
      isReply: bool;
      tags: vec text;
      url: text;
    };
   FaucetClaimAvailableNotificationContent:
    record {receiverPrincipal: principal;};
   NewArticleNotificationContent:
    record {
      articleId: text;
      articleTitle: text;
      authorPrincipal: principal;
      isAuthorPublication: bool;
      tags: vec text;
      url: text;
    };
   NewFollowerNotificationContent:
    record {
      authorPrincipal: principal;
      followerPrincipal: principal;
      followerUrl: text;
    };
   PostNotificationContent:
    record {
      articleId: text;
      articleTitle: text;
      authorPrincipal: principal;
      isAuthorPublication: bool;
      receiverPrincipal: principal;
      tags: vec text;
      url: text;
    };
   PremiumArticleSoldNotificationContent:
    record {
      articleId: text;
      articleTitle: text;
      authorPrincipal: principal;
      isAuthorPublication: bool;
      purchaserPrincipal: principal;
      url: text;
    };
   ReaderExpiredSubscriptionNotificationContent:
    record {
      authorPrincipal: principal;
      subscriberPrincipal: principal;
      time: text;
    };
   TipRecievedNotificationContent:
    record {
      articleId: text;
      articleTitle: text;
      postUrl: text;
      receiverPrincipal: principal;
      recieverIsPublication: bool;
      senderPrincipal: principal;
      tipAmount: text;
      token: text;
    };
   YouSubscribedToAuthorNotificationContent:
    record {
      authorPrincipal: principal;
      subscriberPrincipal: principal;
      time: text;
    };
   YouUnsubscribedFromAuthorNotificationContent:
    record {
      authorPrincipal: principal;
      subscriberPrincipal: principal;
      time: text;
    };
 };
type MetricsGranularity = 
 variant {
   daily;
   hourly;
 };
type List = 
 opt record {
       text;
       List;
     };
type HourlyMetricsData = 
 record {
   canisterCycles: CanisterCyclesAggregatedData;
   canisterHeapMemorySize: CanisterHeapMemoryAggregatedData;
   canisterMemorySize: CanisterMemoryAggregatedData;
   timeMillis: int;
   updateCalls: UpdateCallsAggregatedData;
 };
type GetMetricsParameters = 
 record {
   dateFromMillis: nat;
   dateToMillis: nat;
   granularity: MetricsGranularity;
 };
type DailyMetricsData = 
 record {
   canisterCycles: NumericEntity;
   canisterHeapMemorySize: NumericEntity;
   canisterMemorySize: NumericEntity;
   timeMillis: int;
   updateCalls: nat64;
 };
type CanisterMetricsData = 
 variant {
   daily: vec DailyMetricsData;
   hourly: vec HourlyMetricsData;
 };
type CanisterMetrics = record {data: CanisterMetricsData;};
type CanisterMemoryAggregatedData = vec nat64;
type CanisterHeapMemoryAggregatedData = vec nat64;
type CanisterCyclesAggregatedData = vec nat64;
service : {
  acceptCycles: () -> ();
  availableCycles: () -> (nat) query;
  collectCanisterMetrics: () -> ();
  createNotification: (NotificationType__1, NotificationContent) -> (Result);
  createNotifications:
   (vec record {
          NotificationType__1;
          NotificationContent;
        }) -> (Result);
  disperseBulkSubscriptionNotifications:
   (vec record {
          NotificationType__1;
          NotificationContent;
        }) -> (Result);
  getAdmins: () -> (Result_4) query;
  getCanisterMetrics: (GetMetricsParameters) -> (opt CanisterMetrics) query;
  getCanisterVersion: () -> (text) query;
  getCgUsers: () -> (Result_4) query;
  getMaxMemorySize: () -> (nat) query;
  getMemorySize: () -> (nat) query;
  getPlatformOperators: () -> (List) query;
  getUserNotificationSettings: () -> (Result_3) query;
  getUserNotifications: (text, text) -> (Result_2) query;
  isThereEnoughMemory: () -> (bool) query;
  markNotificationAsRead: (vec text) -> (Result);
  newArticle: (NotificationContent) -> (Result);
  registerCgUser: (text) -> (Result);
  setMaxMemorySize: (nat) -> (Result_1);
  unregisterCgUser: (text) -> (Result);
  updateUserNotificationSettings: (UserNotificationSettings) -> (Result);
}
