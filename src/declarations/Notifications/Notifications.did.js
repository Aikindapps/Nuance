export const idlFactory = ({ IDL }) => {
  const SubscriptionTimeInterval = IDL.Variant({
    'LifeTime' : IDL.Null,
    'Weekly' : IDL.Null,
    'Monthly' : IDL.Null,
    'Annually' : IDL.Null,
  });
  const NotificationContent__1 = IDL.Variant({
    'FaucetClaimAvailable' : IDL.Null,
    'TipReceived' : IDL.Record({
      'bucketCanisterId' : IDL.Text,
      'amountOfTokens' : IDL.Text,
      'tipSenderPrincipal' : IDL.Text,
      'publicationPrincipalId' : IDL.Opt(IDL.Text),
      'postTitle' : IDL.Text,
      'numberOfApplauds' : IDL.Text,
      'tippedTokenSymbol' : IDL.Text,
      'postId' : IDL.Text,
    }),
    'NewArticleByFollowedWriter' : IDL.Record({
      'bucketCanisterId' : IDL.Text,
      'postWriterPrincipal' : IDL.Text,
      'postTitle' : IDL.Text,
      'postId' : IDL.Text,
    }),
    'AuthorLosesSubscriber' : IDL.Record({
      'subscriptionTimeInterval' : SubscriptionTimeInterval,
      'subscriberPrincipalId' : IDL.Text,
    }),
    'YouSubscribedToAuthor' : IDL.Record({
      'amountOfTokens' : IDL.Text,
      'subscriptionEndTime' : IDL.Text,
      'subscriptionTimeInterval' : SubscriptionTimeInterval,
      'subscribedWriterPrincipalId' : IDL.Text,
      'subscriptionStartTime' : IDL.Text,
      'isPublication' : IDL.Bool,
    }),
    'NewCommentOnMyArticle' : IDL.Record({
      'bucketCanisterId' : IDL.Text,
      'commentId' : IDL.Text,
      'isReply' : IDL.Bool,
      'commentContent' : IDL.Text,
      'postTitle' : IDL.Text,
      'commenterPrincipal' : IDL.Text,
      'postId' : IDL.Text,
    }),
    'VerifyProfile' : IDL.Null,
    'YouUnsubscribedFromAuthor' : IDL.Record({
      'subscriptionTimeInterval' : SubscriptionTimeInterval,
      'subscribedWriterPrincipalId' : IDL.Text,
      'isPublication' : IDL.Bool,
    }),
    'NewFollower' : IDL.Record({ 'followerPrincipalId' : IDL.Text }),
    'ReaderExpiredSubscription' : IDL.Record({
      'amountOfTokens' : IDL.Text,
      'subscriptionEndTime' : IDL.Text,
      'subscriptionTimeInterval' : SubscriptionTimeInterval,
      'subscribedWriterPrincipalId' : IDL.Text,
      'subscriptionStartTime' : IDL.Text,
      'isPublication' : IDL.Bool,
    }),
    'ReplyToMyComment' : IDL.Record({
      'bucketCanisterId' : IDL.Text,
      'postWriterPrincipal' : IDL.Text,
      'myCommentId' : IDL.Text,
      'myCommentContent' : IDL.Text,
      'replyCommentContent' : IDL.Text,
      'postTitle' : IDL.Text,
      'replyCommenterPrincipal' : IDL.Text,
      'replyCommentId' : IDL.Text,
      'postId' : IDL.Text,
    }),
    'PremiumArticleSold' : IDL.Record({
      'bucketCanisterId' : IDL.Text,
      'amountOfTokens' : IDL.Text,
      'publicationPrincipalId' : IDL.Opt(IDL.Text),
      'purchasedTokenSymbol' : IDL.Text,
      'purchaserPrincipal' : IDL.Text,
      'postTitle' : IDL.Text,
      'postId' : IDL.Text,
    }),
    'NewArticleByFollowedTag' : IDL.Record({
      'bucketCanisterId' : IDL.Text,
      'tagName' : IDL.Text,
      'postWriterPrincipal' : IDL.Text,
      'postTitle' : IDL.Text,
      'postId' : IDL.Text,
    }),
    'AuthorGainsNewSubscriber' : IDL.Record({
      'amountOfTokens' : IDL.Text,
      'subscriptionEndTime' : IDL.Text,
      'subscriptionTimeInterval' : SubscriptionTimeInterval,
      'subscriptionStartTime' : IDL.Text,
      'subscriberPrincipalId' : IDL.Text,
    }),
  });
  const UserNotificationSettings = IDL.Record({
    'premiumArticleSold' : IDL.Bool,
    'verifyProfile' : IDL.Bool,
    'tipReceived' : IDL.Bool,
    'authorGainsNewSubscriber' : IDL.Bool,
    'authorLosesSubscriber' : IDL.Bool,
    'youSubscribedToAuthor' : IDL.Bool,
    'newCommentOnMyArticle' : IDL.Bool,
    'replyToMyComment' : IDL.Bool,
    'youUnsubscribedFromAuthor' : IDL.Bool,
    'newFollower' : IDL.Bool,
    'readerExpiredSubscription' : IDL.Bool,
    'newArticleByFollowedWriter' : IDL.Bool,
    'newArticleByFollowedTag' : IDL.Bool,
    'faucetClaimAvailable' : IDL.Bool,
  });
  const NotificationContent = IDL.Variant({
    'FaucetClaimAvailable' : IDL.Null,
    'TipReceived' : IDL.Record({
      'bucketCanisterId' : IDL.Text,
      'amountOfTokens' : IDL.Text,
      'tipSenderPrincipal' : IDL.Text,
      'publicationPrincipalId' : IDL.Opt(IDL.Text),
      'postTitle' : IDL.Text,
      'numberOfApplauds' : IDL.Text,
      'tippedTokenSymbol' : IDL.Text,
      'postId' : IDL.Text,
    }),
    'NewArticleByFollowedWriter' : IDL.Record({
      'bucketCanisterId' : IDL.Text,
      'postWriterPrincipal' : IDL.Text,
      'postTitle' : IDL.Text,
      'postId' : IDL.Text,
    }),
    'AuthorLosesSubscriber' : IDL.Record({
      'subscriptionTimeInterval' : SubscriptionTimeInterval,
      'subscriberPrincipalId' : IDL.Text,
    }),
    'YouSubscribedToAuthor' : IDL.Record({
      'amountOfTokens' : IDL.Text,
      'subscriptionEndTime' : IDL.Text,
      'subscriptionTimeInterval' : SubscriptionTimeInterval,
      'subscribedWriterPrincipalId' : IDL.Text,
      'subscriptionStartTime' : IDL.Text,
      'isPublication' : IDL.Bool,
    }),
    'NewCommentOnMyArticle' : IDL.Record({
      'bucketCanisterId' : IDL.Text,
      'commentId' : IDL.Text,
      'isReply' : IDL.Bool,
      'commentContent' : IDL.Text,
      'postTitle' : IDL.Text,
      'commenterPrincipal' : IDL.Text,
      'postId' : IDL.Text,
    }),
    'VerifyProfile' : IDL.Null,
    'YouUnsubscribedFromAuthor' : IDL.Record({
      'subscriptionTimeInterval' : SubscriptionTimeInterval,
      'subscribedWriterPrincipalId' : IDL.Text,
      'isPublication' : IDL.Bool,
    }),
    'NewFollower' : IDL.Record({ 'followerPrincipalId' : IDL.Text }),
    'ReaderExpiredSubscription' : IDL.Record({
      'amountOfTokens' : IDL.Text,
      'subscriptionEndTime' : IDL.Text,
      'subscriptionTimeInterval' : SubscriptionTimeInterval,
      'subscribedWriterPrincipalId' : IDL.Text,
      'subscriptionStartTime' : IDL.Text,
      'isPublication' : IDL.Bool,
    }),
    'ReplyToMyComment' : IDL.Record({
      'bucketCanisterId' : IDL.Text,
      'postWriterPrincipal' : IDL.Text,
      'myCommentId' : IDL.Text,
      'myCommentContent' : IDL.Text,
      'replyCommentContent' : IDL.Text,
      'postTitle' : IDL.Text,
      'replyCommenterPrincipal' : IDL.Text,
      'replyCommentId' : IDL.Text,
      'postId' : IDL.Text,
    }),
    'PremiumArticleSold' : IDL.Record({
      'bucketCanisterId' : IDL.Text,
      'amountOfTokens' : IDL.Text,
      'publicationPrincipalId' : IDL.Opt(IDL.Text),
      'purchasedTokenSymbol' : IDL.Text,
      'purchaserPrincipal' : IDL.Text,
      'postTitle' : IDL.Text,
      'postId' : IDL.Text,
    }),
    'NewArticleByFollowedTag' : IDL.Record({
      'bucketCanisterId' : IDL.Text,
      'tagName' : IDL.Text,
      'postWriterPrincipal' : IDL.Text,
      'postTitle' : IDL.Text,
      'postId' : IDL.Text,
    }),
    'AuthorGainsNewSubscriber' : IDL.Record({
      'amountOfTokens' : IDL.Text,
      'subscriptionEndTime' : IDL.Text,
      'subscriptionTimeInterval' : SubscriptionTimeInterval,
      'subscriptionStartTime' : IDL.Text,
      'subscriberPrincipalId' : IDL.Text,
    }),
  });
  const Notification = IDL.Record({
    'id' : IDL.Text,
    'content' : NotificationContent,
    'read' : IDL.Bool,
    'timestamp' : IDL.Text,
    'notificationReceiverPrincipalId' : IDL.Text,
  });
  const GetUserNotificationsResponse = IDL.Record({
    'notifications' : IDL.Vec(Notification),
    'totalCount' : IDL.Text,
  });
  const Result_1 = IDL.Variant({ 'ok' : IDL.Nat, 'err' : IDL.Text });
  const Result = IDL.Variant({
    'ok' : UserNotificationSettings,
    'err' : IDL.Text,
  });
  return IDL.Service({
    'acceptCycles' : IDL.Func([], [], []),
    'availableCycles' : IDL.Func([], [IDL.Nat], ['query']),
    'createNotification' : IDL.Func([IDL.Text, NotificationContent__1], [], []),
    'createNotifications' : IDL.Func(
        [IDL.Vec(IDL.Tuple(IDL.Text, NotificationContent__1))],
        [],
        [],
      ),
    'createVerifyNotificationTest' : IDL.Func([], [], []),
    'getCanisterVersion' : IDL.Func([], [IDL.Text], ['query']),
    'getMaxMemorySize' : IDL.Func([], [IDL.Nat], ['query']),
    'getMemorySize' : IDL.Func([], [IDL.Nat], ['query']),
    'getUserNotificationSettings' : IDL.Func(
        [],
        [UserNotificationSettings],
        ['query'],
      ),
    'getUserNotifications' : IDL.Func(
        [IDL.Text, IDL.Text],
        [GetUserNotificationsResponse],
        ['query'],
      ),
    'isThereEnoughMemory' : IDL.Func([], [IDL.Bool], ['query']),
    'markNotificationsAsRead' : IDL.Func([IDL.Vec(IDL.Text)], [], []),
    'setMaxMemorySize' : IDL.Func([IDL.Nat], [Result_1], []),
    'updateNotificationSettings' : IDL.Func(
        [UserNotificationSettings],
        [Result],
        [],
      ),
  });
};
export const init = ({ IDL }) => { return []; };
