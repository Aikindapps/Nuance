type WithdrawErrorLog = 
 record {
   amount: nat;
   time: int;
   token: Token;
   user: principal;
 };
type WithdrawArgs = 
 record {
   amount: nat;
   fee: nat;
   token: text;
 };
type Value = 
 variant {
   Blob: blob;
   Int: int;
   Nat: nat;
   Text: text;
 };
type UserPositionInfoWithTokenAmount = 
 record {
   feeGrowthInside0LastX128: nat;
   feeGrowthInside1LastX128: nat;
   id: nat;
   liquidity: nat;
   tickLower: int;
   tickUpper: int;
   token0Amount: nat;
   token1Amount: nat;
   tokensOwed0: nat;
   tokensOwed1: nat;
 };
type UserPositionInfoWithId = 
 record {
   feeGrowthInside0LastX128: nat;
   feeGrowthInside1LastX128: nat;
   id: nat;
   liquidity: nat;
   tickLower: int;
   tickUpper: int;
   tokensOwed0: nat;
   tokensOwed1: nat;
 };
type UserPositionInfo = 
 record {
   feeGrowthInside0LastX128: nat;
   feeGrowthInside1LastX128: nat;
   liquidity: nat;
   tickLower: int;
   tickUpper: int;
   tokensOwed0: nat;
   tokensOwed1: nat;
 };
type TransferLog = 
 record {
   action: text;
   amount: nat;
   daysFrom19700101: nat;
   errorMsg: text;
   fee: nat;
   from: principal;
   fromSubaccount: opt blob;
   index: nat;
   owner: principal;
   result: text;
   timestamp: nat;
   to: principal;
   token: Token;
 };
type Token = 
 record {
   address: text;
   standard: text;
 };
type TickLiquidityInfo = 
 record {
   liquidityGross: nat;
   liquidityNet: int;
   price0: nat;
   price0Decimal: nat;
   price1: nat;
   price1Decimal: nat;
   tickIndex: int;
 };
type TickInfoWithId = 
 record {
   feeGrowthOutside0X128: nat;
   feeGrowthOutside1X128: nat;
   id: text;
   initialized: bool;
   liquidityGross: nat;
   liquidityNet: int;
   secondsOutside: nat;
   secondsPerLiquidityOutsideX128: nat;
   tickCumulativeOutside: int;
 };
type SwapArgs = 
 record {
   amountIn: text;
   amountOutMinimum: text;
   zeroForOne: bool;
 };
type Result_9 = 
 variant {
   err: Error;
   ok: Page;
 };
type Result_8 = 
 variant {
   err: Error;
   ok: vec UserPositionInfoWithId;
 };
type Result_7 = 
 variant {
   err: Error;
   ok: record {
         balance0: nat;
         balance1: nat;
       };
 };
type Result_6 = 
 variant {
   err: Error;
   ok: vec record {
             nat;
             WithdrawErrorLog;
           };
 };
type Result_5 = 
 variant {
   err: Error;
   ok: PoolMetadata;
 };
type Result_4 = 
 variant {
   err: Error;
   ok: record {
         tokensOwed0: nat;
         tokensOwed1: nat;
       };
 };
type Result_3 = 
 variant {
   err: Error;
   ok: int;
 };
type Result_23 = 
 variant {
   err: Error;
   ok: Page_5;
 };
type Result_22 = 
 variant {
   err: Error;
   ok:
    record {
      tokenIncome:
       vec record {
             nat;
             record {
               tokensOwed0: nat;
               tokensOwed1: nat;
             };
           };
      totalTokensOwed0: nat;
      totalTokensOwed1: nat;
    };
 };
type Result_21 = 
 variant {
   err: Error;
   ok: record {
         amount0: nat;
         amount1: nat;
       };
 };
type Result_20 = 
 variant {
   err: Error;
   ok: CycleInfo;
 };
type Result_2 = 
 variant {
   err: Error;
   ok: bool;
 };
type Result_19 = 
 variant {
   err: Error;
   ok: PositionInfo;
 };
type Result_18 = 
 variant {
   err: Error;
   ok: Page_4;
 };
type Result_17 = 
 variant {
   err: Error;
   ok: Page_3;
 };
type Result_16 = 
 variant {
   err: Error;
   ok: Page_2;
 };
type Result_15 = 
 variant {
   err: Error;
   ok:
    record {
      swapFee0Repurchase: nat;
      swapFee1Repurchase: nat;
      swapFeeReceiver: text;
      token0Amount: nat;
      token1Amount: nat;
    };
 };
type Result_14 = 
 variant {
   err: Error;
   ok: vec TransferLog;
 };
type Result_13 = 
 variant {
   err: Error;
   ok: UserPositionInfo;
 };
type Result_12 = 
 variant {
   err: Error;
   ok: vec record {
             text;
             vec nat;
           };
 };
type Result_11 = 
 variant {
   err: Error;
   ok: vec nat;
 };
type Result_10 = 
 variant {
   err: Error;
   ok: Page_1;
 };
type Result_1 = 
 variant {
   err: Error;
   ok: text;
 };
type Result = 
 variant {
   err: Error;
   ok: nat;
 };
type PositionInfoWithId = 
 record {
   feeGrowthInside0LastX128: nat;
   feeGrowthInside1LastX128: nat;
   id: text;
   liquidity: nat;
   tokensOwed0: nat;
   tokensOwed1: nat;
 };
type PositionInfo = 
 record {
   feeGrowthInside0LastX128: nat;
   feeGrowthInside1LastX128: nat;
   liquidity: nat;
   tokensOwed0: nat;
   tokensOwed1: nat;
 };
type PoolMetadata = 
 record {
   fee: nat;
   key: text;
   liquidity: nat;
   maxLiquidityPerTick: nat;
   nextPositionId: nat;
   sqrtPriceX96: nat;
   tick: int;
   token0: Token;
   token1: Token;
 };
type Page_5 = 
 record {
   content: vec record {
                  principal;
                  AccountBalance;
                };
   limit: nat;
   offset: nat;
   totalElements: nat;
 };
type Page_4 = 
 record {
   content: vec PositionInfoWithId;
   limit: nat;
   offset: nat;
   totalElements: nat;
 };
type Page_3 = 
 record {
   content: vec TickLiquidityInfo;
   limit: nat;
   offset: nat;
   totalElements: nat;
 };
type Page_2 = 
 record {
   content: vec TickInfoWithId;
   limit: nat;
   offset: nat;
   totalElements: nat;
 };
type Page_1 = 
 record {
   content: vec UserPositionInfoWithTokenAmount;
   limit: nat;
   offset: nat;
   totalElements: nat;
 };
type Page = 
 record {
   content: vec UserPositionInfoWithId;
   limit: nat;
   offset: nat;
   totalElements: nat;
 };
type MintArgs = 
 record {
   amount0Desired: text;
   amount1Desired: text;
   fee: nat;
   tickLower: int;
   tickUpper: int;
   token0: text;
   token1: text;
 };
type IncreaseLiquidityArgs = 
 record {
   amount0Desired: text;
   amount1Desired: text;
   positionId: nat;
 };
type GetPositionArgs = 
 record {
   tickLower: int;
   tickUpper: int;
 };
type Error = 
 variant {
   CommonError;
   InsufficientFunds;
   InternalError: text;
   UnsupportedToken: text;
 };
type DepositArgs = 
 record {
   amount: nat;
   fee: nat;
   token: text;
 };
type DepositAndMintArgs = 
 record {
   amount0: nat;
   amount0Desired: text;
   amount1: nat;
   amount1Desired: text;
   fee0: nat;
   fee1: nat;
   positionOwner: principal;
   tickLower: int;
   tickUpper: int;
 };
type DecreaseLiquidityArgs = 
 record {
   liquidity: text;
   positionId: nat;
 };
type CycleInfo = 
 record {
   available: nat;
   balance: nat;
 };
type ClaimArgs = record {positionId: nat;};
type AccountBalance = 
 record {
   balance0: nat;
   balance1: nat;
 };
service : {
  allTokenBalance: (nat, nat) -> (Result_23) query;
  approvePosition: (principal, nat) -> (Result_2);
  batchRefreshIncome: (vec nat) -> (Result_22) query;
  checkOwnerOfUserPosition: (principal, nat) -> (Result_2) query;
  claim: (ClaimArgs) -> (Result_21);
  decreaseLiquidity: (DecreaseLiquidityArgs) -> (Result_21);
  deposit: (DepositArgs) -> (Result);
  depositAllAndMint: (DepositAndMintArgs) -> (Result);
  depositFrom: (DepositArgs) -> (Result);
  getAdmins: () -> (vec principal) query;
  getAvailabilityState: () ->
   (record {
      available: bool;
      whiteList: vec principal;
    }) query;
  getClaimLog: () -> (vec text) query;
  getCycleInfo: () -> (Result_20);
  getMistransferBalance: (Token) -> (Result);
  getPosition: (GetPositionArgs) -> (Result_19) query;
  getPositions: (nat, nat) -> (Result_18) query;
  getTickInfos: (nat, nat) -> (Result_17) query;
  getTicks: (nat, nat) -> (Result_16) query;
  getTokenAmountState: () -> (Result_15) query;
  getTokenBalance: () -> (record {
                            token0: nat;
                            token1: nat;
                          });
  getTokenMeta: () ->
   (record {
      token0: vec record {
                    text;
                    Value;
                  };
      token1: vec record {
                    text;
                    Value;
                  };
    });
  getTransferLogs: () -> (Result_14) query;
  getUserByPositionId: (nat) -> (Result_1) query;
  getUserPosition: (nat) -> (Result_13) query;
  getUserPositionIds: () -> (Result_12) query;
  getUserPositionIdsByPrincipal: (principal) -> (Result_11) query;
  getUserPositionWithTokenAmount: (nat, nat) -> (Result_10) query;
  getUserPositions: (nat, nat) -> (Result_9) query;
  getUserPositionsByPrincipal: (principal) -> (Result_8) query;
  getUserUnusedBalance: (principal) -> (Result_7) query;
  getVersion: () -> (text) query;
  getWithdrawErrorLog: () -> (Result_6) query;
  increaseLiquidity: (IncreaseLiquidityArgs) -> (Result);
  init: (nat, int, nat) -> ();
  logMessageGet: () -> (vec text) query;
  metadata: () -> (Result_5) query;
  mint: (MintArgs) -> (Result);
  quote: (SwapArgs) -> (Result) query;
  quoteForAll: (SwapArgs) -> (Result) query;
  refreshIncome: (nat) -> (Result_4) query;
  removeErrorTransferLog: (nat, bool) -> ();
  removeWithdrawErrorLog: (nat, bool) -> ();
  resetTokenAmountState: (nat, nat, nat, nat) -> ();
  setAdmins: (vec principal) -> ();
  setAvailable: (bool) -> ();
  setWhiteList: (vec principal) -> ();
  sumTick: () -> (Result_3) query;
  swap: (SwapArgs) -> (Result);
  transferPosition: (principal, principal, nat) -> (Result_2);
  upgradeTokenStandard: (principal) -> (Result_1);
  withdraw: (WithdrawArgs) -> (Result);
  withdrawMistransferBalance: (Token) -> (Result);
}
