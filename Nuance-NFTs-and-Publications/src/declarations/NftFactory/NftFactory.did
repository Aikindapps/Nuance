type Time = int;
type Result_1 = 
 variant {
   err: text;
   ok: text;
 };
type Result = 
 variant {
   err: text;
   ok: List;
 };
type MetadataValue = 
 record {
   text;
   variant {
     "blob": blob;
     "nat": nat;
     "nat8": nat8;
     "text": text;
   };
 };
type MetadataContainer = 
 variant {
   "blob": blob;
   data: vec MetadataValue;
   json: text;
 };
type Metadata = 
 variant {
   fungible:
    record {
      decimals: nat8;
      metadata: opt MetadataContainer;
      name: text;
      symbol: text;
    };
   nonfungible:
    record {
      asset: text;
      metadata: opt MetadataContainer;
      name: text;
      thumbnail: text;
    };
 };
type List = 
 opt record {
       text;
       List;
     };
type InitNftCanisterData = 
 record {
   admins: vec principal;
   collectionName: text;
   icpPrice: nat;
   initialMintingAddresses: vec text;
   marketplaceOpen: Time;
   maxSupply: nat;
   metadata: Metadata;
   postId: text;
   royalty: vec record {
                  text;
                  nat64;
                };
   thumbnail: text;
   writerPrincipal: principal;
 };
service : {
  acceptCycles: () -> ();
  availableCycles: () -> (nat) query;
  createNftCanister: (InitNftCanisterData) -> (Result_1);
  getAdmins: () -> (Result) query;
  getAllNftCanisterIds: () -> (vec record {
                                     text;
                                     text;
                                   }) query;
  getCanisterVersion: () -> (text) query;
  getPlatformOperators: () -> (List) query;
}
