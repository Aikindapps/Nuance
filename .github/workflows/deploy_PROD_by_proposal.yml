name: Deploy PROD by Proposal
on:
  workflow_dispatch:
    inputs:
      canisterName:
        description: 'Canister Name, or simply type all... (all, FastBlocks_EmailOptIn, KinicEndpoint, CyclesDispenser, Storage, User, PostCore, NftFactory, PublicationManagement)'
        required: true
      network:
        description: 'ic or local'
        required: true
        default: 'ic'
      title:
        description: 'Title of proposal'
        required: true
      url:
        description: 'URL of discussion or additional info'
        required: true
        default: 'https://oc.app/community/3qzyb-ryaaa-aaaar-ateiq-cai/channel/180903126530388291372782995208461639178'
      summary:
        description: 'Summary of proposal'
        required: true
      branch:
        description: 'Branch or Tag to Deploy'
        required: true
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Verify branch
        run: |
          if [ "${{ github.ref }}" != "refs/tags/${{ github.event.inputs.branch }}" ]; then
            echo "Error: The current branch does not match the input branch."
            exit 1
          fi

      - name: npm install
        run: npm install

      - name: Install dfx
        uses: dfinity/setup-dfx@main
      - name: Confirm successful installation
        run: |
          dfxvm install 0.22.0
          dfxvm default 0.22.0
          dfx --version

      - name: Install Quill
        run: |
          mkdir scripts/sns/install/bin
          bash scripts/sns/install/install.sh
          bash scripts/sns/install/move.sh

      - name: Start DFX background
        run: dfx start --background

      - name: Set up dfx identity
        run: |
          sudo apt-get install -y jq
          rm -f ~/.config/dfx/identity/prod/identity.pem
          mkdir -p ~/.config/dfx/identity/prod/
          echo "$PROD_IDENT" | base64 --decode > ~/.config/dfx/identity/prod/identity.pem
          echo '{}' | jq --arg wallet "$PROD_WALLET" '.identities.prod.ic = $wallet' > ~/.config/dfx/identity/prod/wallets.json
          dfx identity use prod
          dfx identity get-principal
          dfx identity set-wallet "$PROD_WALLET" --network ic
        env:
          PROD_IDENT: ${{ secrets.PROD_IDENT }}
          PROD_WALLET: ${{ secrets.PROD_WALLET }}

      - name: Get Principal
        run: dfx identity get-principal

      - name: Create .env file
        run: |
          cat << EOF > .env
          II_PROVIDER_URL="https://identity.ic0.app/#authorize"
          II_PROVIDER_USE_FAKE="false"
          II_SESSION_TIMEOUT="480"
          II_INACTIVITY_TIMEOUT="480"
          UAT_FRONTEND_CANISTER_ID="${{ secrets.UAT_NUANCE_ASSETS }}"
          USERGEEK_API_KEY="${{ secrets.USERGEEK_API_KEY }}"
          USERGEEK_API_KEY_SECONDARY="${{ secrets.USERGEEK_API_KEY_SECONDARY }}"
          FASTBLOCKS_MAILERLITE_API_KEY="${{ secrets.FASTBLOCKS_MAILERLITE_API_KEY }}"
          DFX_NETWORK="ic"
          PUBLICATIONS_REPO_PATH=./Nuance-NFTs-and-Publications
          NUANCE_MAIN_REPO_PATH=./
          USER_CANISTER_ID = 'rtqeo-eyaaa-aaaaf-qaana-cai'
          POST_CORE_CANISTER_ID = '322sd-3iaaa-aaaaf-qakgq-cai'
          KINIC_ENDPOINT_CANISTER_ID = '4m3sz-lqaaa-aaaaf-qagza-cai'
          FASTBLOCKS_EMAIL_OPT_IN_CANISTER_ID ='dgwwd-jaaaa-aaaaf-qai7a-cai'
          POST_RELATIONS_CANISTER_ID = 'qyi2m-xaaaa-aaaaf-qal3a-cai'
          STORAGE_CANISTER_ID = 'y2pkg-ciaaa-aaaaf-qagbq-cai'
          CYCLES_DISPENSER_CANISTER_ID = '353ux-wqaaa-aaaaf-qakga-cai'
          NUANCE_ASSETS_CANISTER_ID = 'exwqn-uaaaa-aaaaf-qaeaa-cai'
          METRICS_CANISTER_ID = 'xjlvo-hyaaa-aaaam-qbcga-cai'
          NFT_FACTORY_CANISTER_ID = 'kc4mb-myaaa-aaaaf-qajpq-cai'
          PUBLICATION_MANAGEMENT_CANISTER_ID = 'kq23y-aiaaa-aaaaf-qajmq-cai'
          NOTIFICATIONS_CANISTER_ID = 'qrlrq-biaaa-aaaaf-qal2q-cai'
          SUBSCRIPTION_CANISTER_ID = 's6qib-6qaaa-aaaaf-qalwa-cai'
          EOF

      - name: Generate empty canister_ids.json to prevent undefined error
        run: |
          mkdir -p ./.dfx/local && touch ./.dfx/local/canister_ids.json
          echo '{}' > ./.dfx/local/canister_ids.json

      - name: Install vessel for NFTs and Publications
        run: |
          cd ./Nuance-NFTs-and-Publications
            wget https://github.com/dfinity/vessel/releases/download/v0.7.0/vessel-linux64
            mv vessel-linux64 vessel
            chmod +x vessel
            mv vessel /usr/local/bin/.
            vessel --version

      - name: Create, Build and Proposal
        run: |
          echo "$PROD_IDENT" | base64 --decode > identity.pem
          wasms="${{ github.event.inputs.canisterName }}"
          all_wasms=("CyclesDispenser" "FastBlocks_EmailOptIn" "KinicEndpoint" "PostCore" "Storage" "User" "NftFactory" "PublicationManagement")

          if [[ $wasms == "all" ]]; then
            wasms="${all_wasms[@]}"
          fi
          canisterName=${{ github.event.inputs.canisterName }}
          network=${{ github.event.inputs.network }}
          title="${{ github.event.inputs.title }}"
          url="${{ github.event.inputs.url }}"
          summary="${{ github.event.inputs.summary }}"

          for wasm in $wasms; do
            echo "Processing $wasm..."
            if [[ $wasm == "NftFactory" || $wasm == "PublicationManagement" ]]; then
              cd Nuance-NFTs-and-Publications
            fi
            dfx canister create $wasm
            dfx generate $wasm
            dfx build $wasm --network $network
            if [[ $wasm == "NftFactory" || $wasm == "PublicationManagement" ]]; then
              cd ..
            fi
            node scripts/sns/CanisterUpgradeProposal.js --canisterName=$wasm --network=$network --title="$title" --url="$url" --summary="$summary" --devNeuronId=$PROD_NEURON_ID --pemFilePath=./identity.pem
            sleep 30
          done
        env:
          PROD_IDENT: ${{ secrets.PROD_IDENT }}
          PROD_NEURON_ID: ${{ secrets.PROD_NEURON_ID }}
