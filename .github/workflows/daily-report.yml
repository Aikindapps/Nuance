name: Daily Report

# on:
#   workflow_dispatch:

# on:
#   schedule:
#     - cron: '0 0 * * *' # Runs at 00:00 UTC every day
#on click
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: npm install
        run: npm install

      - name: Install dfx
        uses: dfinity/setup-dfx@main
      - name: Confirm successful installation
        run: |
          dfxvm install 0.17.0
          dfxvm default 0.17.0
          dfx --version

      - name: Start DFX background
        run: dfx start --background

      - name: Set up dfx identity
        run: |
          sudo apt-get install -y jq
          rm -f ~/.config/dfx/identity/prod/identity.pem
          mkdir -p ~/.config/dfx/identity/prod/
          echo "$PROD_IDENT" | base64 --decode > ~/.config/dfx/identity/prod/identity.pem
          echo '{}' | jq --arg wallet "$PROD_WALLET" '.identities.prod.ic = $wallet' > ~/.config/dfx/identity/prod/wallets.json
          dfx identity use prod
          dfx identity get-principal
          dfx identity set-wallet "$PROD_WALLET" --network ic
        env:
          PROD_IDENT: ${{ secrets.PROD_IDENT }}
          PROD_WALLET: ${{ secrets.PROD_WALLET }}

      - name: Get Principal
        run: dfx identity get-principal

      - name: Check Cycles Dispenser
        id: check_cycles
        run: |
          BALANCE=$(dfx canister --network ic call CyclesDispenser getStatus -qq | tr -d '\r\n"')
          echo "CYCLES_BALANCE=$BALANCE" >> $GITHUB_ENV

      - name: Check SNS Canister Cycles
        id: check_sns_cycles
        run: |
          CANISTERS=("rzbmc-yiaaa-aaaaq-aabsq-cai" "rxdbk-dyaaa-aaaaq-aabtq-cai" "q5mdq-biaaa-aaaaq-aabuq-cai" "rqch6-oaaaa-aaaaq-aabta-cai" "ssx2b-6qaaa-aaaaq-aabya-cai" "q2nfe-mqaaa-aaaaq-aabua-cai")
          SNS_CYCLES=""
          for CANISTER in "${CANISTERS[@]}"; do
            if [ "$CANISTER" = "q2nfe-mqaaa-aaaaq-aabua-cai" ]; then
              OUTPUT=$(dfx canister call --network ic $CANISTER get_canister_status '(record {})' --candid ./.github/workflows/candid/sns_swap.did -qq)
            else
              OUTPUT=$(dfx canister call --network ic rzbmc-yiaaa-aaaaq-aabsq-cai canister_status '(record {canister_id = principal "'"$CANISTER"'"})' --candid ./.github/workflows/candid/sns_gov.did -qq)
            fi
            CYCLES=$(echo "$OUTPUT" | grep -oP '(?<=cycles = )\d+')
            echo "Cycles for $CANISTER: $CYCLES"

            if [ "$CYCLES" -ge 25 ]; then
              STATUS="ðŸŸ¢" # Green for >= 25T
            elif [ "$CYCLES" -ge 10 ]; then
              STATUS="ðŸŸ¡" # Yellow for >= 10T and < 25T
            else
              STATUS="ðŸ”´" # Red for < 10T
            fi
            SNS_CYCLES+="$STATUS $CANISTER - ${CYCLES}T\n"
          done
          echo "SNS_CYCLES=$SNS_CYCLES" >> $GITHUB_ENV
        shell: /usr/bin/bash -e {0}

      - name: Get Metrics
        run: |
          METRICS_RAW=$(dfx canister call --network ic PostCore getPostsPerHourLast24Hours -qq)
          METRICS=$(node .github/workflows/utils/parseMetrics.js "$METRICS_RAW" "posts")
          echo "METRICS<<EOF" >> $GITHUB_ENV
          echo "$METRICS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        shell: /usr/bin/bash -e {0}

      - name: Get Post Views 24hrs
        run: |
          POST_VIEWS_RAW=$(dfx canister call --network ic PostCore getPostViewsPerHourLast24Hours -qq)
          POST_VIEWS=$(node .github/workflows/utils/parseViews.js "$POST_VIEWS_RAW")
          echo "POST_VIEWS=$POST_VIEWS" >> $GITHUB_ENV
        shell: /usr/bin/bash -e {0}

      - name: Get Number of Registered Users
        run: |
          REGISTERED_USERS_RAW=$(dfx canister call --network ic User getNumberOfAllRegisteredUsers -qq)
          echo "Raw Output: $REGISTERED_USERS_RAW"
          REGISTERED_USERS=$(echo $REGISTERED_USERS_RAW | grep -oP '(?<=\()\d+(_\d+)?(?=\s*: nat\))')
          echo "REGISTERED_USERS=$REGISTERED_USERS" >> $GITHUB_ENV
        shell: /usr/bin/bash -e {0}

      - name: Get Number of Active Users
        run: |
          ACTIVE_USERS_RAW=$(dfx canister call --network ic User getActiveUsersByRange '(record {day= 1 : nat; month= 0 : nat; hour= 0 : nat; year= 0 : nat})' -qq)
          echo "Raw Output: $ACTIVE_USERS_RAW"
          ACTIVE_USERS=$(echo $ACTIVE_USERS_RAW | grep -oP '(?<=\()\d+(?=\s*: nat\))')
          echo "ACTIVE_USERS=$ACTIVE_USERS" >> $GITHUB_ENV
        shell: /usr/bin/bash -e {0}

      - name: List Proposals
        id: list_proposals
        run: |
          PROPOSALS_OUTPUT=$(dfx canister call --network ic rqch6-oaaaa-aaaaq-aabta-cai list_proposals \
          '(record {include_reward_status = vec {}; before_proposal = null; limit = 100 : nat32; exclude_type = vec {}; include_status = vec {1 : int32}})' \
          --candid ./.github/workflows/candid/sns_gov.did -qq)
          echo "$PROPOSALS_OUTPUT" > proposals_output.txt

      - name: Parse Proposals Output
        run: node .github/workflows/utils/parseProposals.js proposals_output.txt
        id: parse_proposals

      # - name: Get Total Tips
      #   run: |
      #     TIPS_RAW=$(dfx canister call --network ic PostCore getTotalAmountOfTipsReceived -qq)
      #     TIPS=$(echo $TIPS_RAW | grep -oP '(?<=\()\d+(?=\s*: nat\))')
      #     echo "TOTAL_TIPS=$TIPS" >> $GITHUB_ENV
      #   shell: /usr/bin/bash -e {0}

      - name: Get Total Posts
        run: |
          POSTS_RAW=$(dfx canister call --network ic PostCore getTotalPostCount -qq)
          echo "POSTS_RAW=$POSTS_RAW" >> $GITHUB_ENV
        shell: /usr/bin/bash -e {0}




      - name: Notify Slack
        run: |
          SLACK_WEBHOOK_URL="https://hooks.slack.com/services/${{ secrets.DAILY_REPORT_BOT_WEBHOOK }}"

          # Constructing the message
          MESSAGE="*Daily Report*\n\n*Cycles Dispenser Status*\n${{ env.CYCLES_BALANCE }}\n\n*SNS Canister Cycles*\n${{ env.SNS_CYCLES }}\n\n*Metrics*\n*Post Metrics (past 24 hrs)*\n${{ env.METRICS }}\n\n*Post Views (past 24 hrs)*\nTotal Views: ${{ env.POST_VIEWS }}\n\n*Number of Registered Users*\n${{ env.REGISTERED_USERS }}\n\n*Number of Active Users*\n${{ env.ACTIVE_USERS }}\n\n*Total Post Count of all authors*\n${{ env.POSTS_RAW }}"

          FAMILIAR_COUNT=${{env.FAMILIAR_COUNT}}
          UNFAMILIAR_COUNT=${{env.UNFAMILIAR_COUNT}}

          PROPOSAL_SUBMISSIONS="*Proposal Submissions*\nProposals from Aikin neurons: $FAMILIAR_COUNT"
          if [ "$UNFAMILIAR_COUNT" -gt 0 ]; then
            PROPOSAL_SUBMISSIONS+="\nUnfamiliar Proposals: $UNFAMILIAR_COUNT :exclamation:"
          fi
          MESSAGE+="\n\n$PROPOSAL_SUBMISSIONS"

          # Send the message
          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"$MESSAGE\"}" $SLACK_WEBHOOK_URL
        shell: bash
