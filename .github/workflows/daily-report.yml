name: Daily Report

on:
  workflow_dispatch:

#on:
# schedule:
#   # - cron: '0 0 * * *'  # Runs at 00:00 UTC every day

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: npm install
        run: npm install

      - name: Install DFX
        run: echo -e "yes" | DFX_VERSION=0.15.0 sh -c "$(curl -fsSL https://sdk.dfinity.org/install.sh)"

      - name: Start DFX background
        run: dfx start --background

      - name: Set up dfx identity
        run: |
          sudo apt-get install -y jq
          rm -f ~/.config/dfx/identity/prod/identity.pem
          mkdir -p ~/.config/dfx/identity/prod/
          echo "$PROD_IDENT" | base64 --decode > ~/.config/dfx/identity/prod/identity.pem
          echo '{}' | jq --arg wallet "$PROD_WALLET" '.identities.prod.ic = $wallet' > ~/.config/dfx/identity/prod/wallets.json
          dfx identity use prod
          dfx identity get-principal
          dfx identity set-wallet "$PROD_WALLET" --network ic
        env:
          PROD_IDENT: ${{ secrets.PROD_IDENT }}
          PROD_WALLET: ${{ secrets.PROD_WALLET }}

      - name: Get Principal
        run: dfx identity get-principal

      - name: Check Cycles Dispenser
        id: check_cycles
        run: |
          BALANCE=$(dfx canister --network ic call CyclesDispenser getStatus -qq | tr -d '\r\n"')
          echo "CYCLES_BALANCE=$BALANCE" >> $GITHUB_ENV

      - name: Get Metrics
        run: |
          METRICS_RAW=$(dfx canister call --network ic PostCore getPostsPerHourLast24Hours -qq)
          METRICS=$(node .github/workflows/utils/parseMetrics.js "$METRICS_RAW" "posts")
          echo "METRICS<<EOF" >> $GITHUB_ENV
          echo "$METRICS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        shell: /usr/bin/bash -e {0}

      - name: Get Post Views 24hrs
        run: |
          POST_VIEWS_RAW=$(dfx canister call --network ic PostCore getPostViewsPerHourLast24Hours -qq)
          POST_VIEWS=$(node .github/workflows/utils/parseViews.js "$POST_VIEWS_RAW")
          echo "POST_VIEWS=$POST_VIEWS" >> $GITHUB_ENV
        shell: /usr/bin/bash -e {0}

      - name: Get Number of Registered Users
        run: |
          REGISTERED_USERS_RAW=$(dfx canister call --network ic User getNumberOfAllRegisteredUsers -qq)
          echo "Raw Output: $REGISTERED_USERS_RAW"
          REGISTERED_USERS=$(echo $REGISTERED_USERS_RAW | grep -oP '(?<=\()\d+(_\d+)?(?=\s*: nat\))')
          echo "REGISTERED_USERS=$REGISTERED_USERS" >> $GITHUB_ENV
        shell: /usr/bin/bash -e {0}

      - name: Get Number of Active Users
        run: |
          ACTIVE_USERS_RAW=$(dfx canister call --network ic User getActiveUsersByRange '(record {day= 1 : nat; month= 0 : nat; hour= 0 : nat; year= 0 : nat})' -qq)
          echo "Raw Output: $ACTIVE_USERS_RAW"
          ACTIVE_USERS=$(echo $ACTIVE_USERS_RAW | grep -oP '(?<=\()\d+(?=\s*: nat\))')
          echo "ACTIVE_USERS=$ACTIVE_USERS" >> $GITHUB_ENV
        shell: /usr/bin/bash -e {0}

      - name: Notify Slack
        run: |
          SLACK_WEBHOOK_URL="https://hooks.slack.com/services/${{ secrets.TEST_SLACK_KEY }}"
          MESSAGE="*Daily Report:*\n>>>*Cycles Dispenser Status:*\n ${{ env.CYCLES_BALANCE }}\n\n*Post Metrics (past 24 hrs):*\n- ${{ env.METRICS }}\n\n*Post Views (past 24 hrs):*\n- Total Views: ${{ env.POST_VIEWS }}\n\n*Number of Registered Users:*\n- ${{ env.REGISTERED_USERS }}\n\nNumber of Active Users:\n- ${{ env.ACTIVE_USERS }}"
          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"$MESSAGE\"}" $SLACK_WEBHOOK_URL
        shell: /usr/bin/bash -e {0}
