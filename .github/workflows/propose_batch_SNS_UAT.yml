#Run after assets are commited to the asset canister by a developer with prepare permissions.
# Next a proposal can be made to execute proposed batch.

name: Propose Batch SNS_UAT

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to commit'
        required: true
      batchId:
        description: 'Batch ID'
        required: true
      evidence:
        description: 'Evidence'
        required: true
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: npm install
        run: npm install

      - name: Install DFX
        run: echo -e "yes" | DFX_VERSION=0.15.0 sh -c "$(curl -fsSL https://sdk.dfinity.org/install.sh)"

      - name: Install Quill
        run: |
          mkdir scripts/sns/install/bin
          bash scripts/sns/install/install.sh
          bash scripts/sns/install/move.sh

      - name: Start DFX background
        run: dfx start --background

      - name: Set up dfx identity
        run: |
          rm -f ~/.config/dfx/identity/sns_uat/identity.pem
          mkdir -p ~/.config/dfx/identity/sns_uat/
          echo "$SNS_UAT_IDENT" | base64 --decode > ~/.config/dfx/identity/sns_uat/identity.pem
          echo "$SNS_UAT_WALLET" > ~/.config/dfx/identity/sns_uat/wallets.json
          dfx identity use sns_uat
          dfx identity get-principal
          dfx identity set-wallet vf5cm-vaaaa-aaaak-qcqgq-cai --network ic
        env:
          SNS_UAT_IDENT: ${{ secrets.SNS_UAT_IDENT }}
          SNS_UAT_WALLET: ${{ secrets.SNS_UAT_WALLET }}

      - name: Get Principal
        run: dfx identity get-principal

      - name: Generate canister_ids.json and canisterIds.mo
        run: |
          mkdir -p ./.dfx/local && touch ./.dfx/local/canister_ids.json
          echo '{}' > ./.dfx/local/canister_ids.json

          echo '{
            "FastBlocks_EmailOptIn": { "ic": "'"$FASTBLOCKS_EMAILOPTIN"'" },
            "KinicEndpoint": { "ic": "'"$KINICENDPOINT"'" },
            "CyclesDispenser": { "ic": "'"$CYCLESDISPENSER"'" },
            "PostIndex": { "ic": "'"$POSTINDEX"'" },
            "Storage": { "ic": "'"$STORAGE"'" },
            "User": { "ic": "'"$USER"'" },
            "nuance_assets": { "ic": "'"$NUANCE_ASSETS"'" },
            "PostCore": { "ic": "'"$POSTCORE"'" },
            "PostBucket": { "ic": "'"$POSTBUCKET"'" },
            "Metrics": { "ic": "'"$METRICS"'" }
          }' > canister_ids.json

          echo '{
            "governance_canister_id": "'"$GOVERNANCE_CANISTER_ID"'",
            "index_canister_id": "'"$INDEX_CANISTER_ID"'",
            "ledger_canister_id": "'"$LEDGER_CANISTER_ID"'",
            "root_canister_id": "'"$ROOT_CANISTER_ID"'",
            "swap_canister_id": "'"$SWAP_CANISTER_ID"'"
          }' > sns_canister_ids.json

          echo '{
            "NftFactory": {
              "ic": "'"$NFTFACTORY"'"
            },
            "PublicationManagement": {
              "ic": "'"$PUBLICATIONMANAGEMENT"'"
            },
            "Publisher": {
              "ic": "'"$PUBLISHER"'"
            }
          }' > ./Nuance-NFTs-and-Publications/canister_ids.json

          echo 'module {
            public let USER_CANISTER_ID = "'"$USER"'";
            public let POST_CORE_CANISTER_ID = "'"$POSTCORE"'";
            public let KINIC_ENDPOINT_CANISTER_ID = "'"$KINICENDPOINT"'";
            public let FASTBLOCKS_EMAIL_OPT_IN_CANISTER_ID = "'"$FASTBLOCKS_EMAILOPTIN"'";
            public let POST_INDEX_CANISTER_ID = "'"$POSTINDEX"'";
            public let STORAGE_CANISTER_ID = "'"$STORAGE"'";
            public let CYCLES_DISPENSER_CANISTER_ID = "'"$CYCLESDISPENSER"'";
            public let NUANCE_ASSETS_CANISTER_ID = "'"$NUANCE_ASSETS"'";
            public let METRICS_CANISTER_ID = "'"$METRICS"'";
            public let NFT_FACTORY_CANISTER_ID = "'"$NFTFACTORY"'";
            public let PUBLICATION_MANAGEMENT_CANISTER_ID = "'"$PUBLICATIONMANAGEMENT"'";
            public let PUBLISHER_CANISTER_ID = "'"$PUBLISHER"'";
          };' > src/shared/canisterIds.mo

        env:
          FASTBLOCKS_EMAILOPTIN: ${{ secrets.SNS_UAT_FASTBLOCKS_EMAILOPTIN }}
          KINICENDPOINT: ${{ secrets.SNS_UAT_KINICENDPOINT }}
          CYCLESDISPENSER: ${{ secrets.SNS_UAT_CYCLESDISPENSER }}
          POSTINDEX: ${{ secrets.SNS_UAT_POSTINDEX }}
          STORAGE: ${{ secrets.SNS_UAT_STORAGE }}
          USER: ${{ secrets.SNS_UAT_USER }}
          NUANCE_ASSETS: ${{ secrets.SNS_UAT_NUANCE_ASSETS }}
          POSTCORE: ${{ secrets.SNS_UAT_POST_CORE }}
          POSTBUCKET: ${{ secrets.SNS_UAT_POST_BUCKET }}
          METRICS: ${{ secrets.SNS_UAT_METRICS }}
          GOVERNANCE_CANISTER_ID: ${{ secrets.SNS_UAT_GOVERNANCE_CANISTER_ID }}
          INDEX_CANISTER_ID: ${{ secrets.SNS_UAT_INDEX_CANISTER_ID }}
          LEDGER_CANISTER_ID: ${{ secrets.SNS_UAT_LEDGER_CANISTER_ID }}
          ROOT_CANISTER_ID: ${{ secrets.SNS_UAT_ROOT_CANISTER_ID }}
          SWAP_CANISTER_ID: ${{ secrets.SNS_UAT_SWAP_CANISTER_ID }}
          NFTFACTORY: ${{ secrets.SNS_UAT_NFTFACTORY }}
          PUBLICATIONMANAGEMENT: ${{ secrets.SNS_UAT_PUBLICATIONMANAGEMENT }}
          PUBLISHER: ${{ secrets.SNS_UAT_PUBLISHER }}

      - name: Vessel install
        run: |
          cd ./Nuance-NFTs-and-Publications
          wget https://github.com/dfinity/vessel/releases/download/v0.6.4/vessel-linux64
          mv vessel-linux64 vessel
          chmod +x vessel
          mv vessel /usr/local/bin/.
          vessel --version

      - name: Create commit Proposal
        run: |
          node scripts/sns/assetCanisterUpgrade.js --functionId=1690217631837 --devNeuronId=$SNS_UAT_NEURON_ID --pemFilePath=./identity.pem --batchId=${{ github.event.inputs.batchId }} --evidence=${{ github.event.inputs.evidence }}
