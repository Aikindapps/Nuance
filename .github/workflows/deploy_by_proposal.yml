name: Deploy SNS_UAT by Proposal

on:
  workflow_dispatch:
    inputs:
      canisterName:
        description: 'Canister Name, or simply type all... (all, FastBlocks_EmailOptIn, KinicEndpoint, CyclesDispenser, PostIndex, Storage, User, PostCore, NftFactory, PublicationManagement)'
        required: true
      network:
        description: 'ic or local'
        required: true
      title:
        description: 'Title of proposal'
        required: true
      url:
        description: 'URL of discussion or additional info'
        required: true
        default: 'https://nuance.xyz/'
      summary:
        description: 'Summary of proposal'
        required: true
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: npm install
      run: npm install

    - name: Install DFX
      run: echo -e "yes" | DFX_VERSION=0.15.0 sh -c "$(curl -fsSL https://sdk.dfinity.org/install.sh)"

    - name: Install Quill
      run: |
        mkdir scripts/sns/install/bin
        bash scripts/sns/install/install.sh
        bash scripts/sns/install/move.sh

    - name: Start DFX background
      run: dfx start --background

    - name: Set up dfx identity
      run: |
        rm -f ~/.config/dfx/identity/sns_uat/identity.pem
        mkdir -p ~/.config/dfx/identity/sns_uat/
        echo "$SNS_UAT_IDENT" | base64 --decode > ~/.config/dfx/identity/sns_uat/identity.pem
        echo "$SNS_UAT_WALLET" > ~/.config/dfx/identity/sns_uat/wallets.json
        dfx identity use sns_uat
        dfx identity get-principal
        dfx identity set-wallet vf5cm-vaaaa-aaaak-qcqgq-cai --network ic
      env:
        SNS_UAT_IDENT: ${{ secrets.SNS_UAT_IDENT }}
        SNS_UAT_WALLET: ${{ secrets.SNS_UAT_WALLET }}

          
    - name: Get Principal
      run:  dfx identity get-principal

    - name: Generate canister_ids.json in main repo
      run: |
        mkdir -p ./.dfx/local && touch ./.dfx/local/canister_ids.json
        echo '{}' > ./.dfx/local/canister_ids.json

        echo '{
          "FastBlocks_EmailOptIn": { "ic": "'"$FASTBLOCKS_EMAILOPTIN"'" },
          "KinicEndpoint": { "ic": "'"$KINICENDPOINT"'" },
          "CyclesDispenser": { "ic": "'"$CYCLESDISPENSER"'" },
          "PostIndex": { "ic": "'"$POSTINDEX"'" },
          "Storage": { "ic": "'"$STORAGE"'" },
          "User": { "ic": "'"$USER"'" },
          "nuance_assets": { "ic": "'"$NUANCE_ASSETS"'" },
          "PostCore": { "ic": "'"$POSTCORE"'" },
          "PostBucket": { "ic": "'"$POSTBUCKET"'" },
          "Metrics": { "ic": "'"$METRICS"'" }
        }' > canister_ids.json

         echo '{
          "governance_canister_id": "'"$GOVERNANCE_CANISTER_ID"'",
          "index_canister_id": "'"$INDEX_CANISTER_ID"'",
          "ledger_canister_id": "'"$LEDGER_CANISTER_ID"'",
          "root_canister_id": "'"$ROOT_CANISTER_ID"'",
          "swap_canister_id": "'"$SWAP_CANISTER_ID"'"
        }' > sns_canister_ids.json
        
      env:
        FASTBLOCKS_EMAILOPTIN: ${{ secrets.SNS_UAT_FASTBLOCKS_EMAILOPTIN }}
        KINICENDPOINT: ${{ secrets.SNS_UAT_KINICENDPOINT }}
        CYCLESDISPENSER: ${{ secrets.SNS_UAT_CYCLESDISPENSER }}
        POSTINDEX: ${{ secrets.SNS_UAT_POSTINDEX }}
        STORAGE: ${{ secrets.SNS_UAT_STORAGE }}
        USER: ${{ secrets.SNS_UAT_USER }}
        NUANCE_ASSETS: ${{ secrets.SNS_UAT_NUANCE_ASSETS }}
        POSTCORE: ${{ secrets.SNS_UAT_POST_CORE }}
        POSTBUCKET: ${{ secrets.SNS_UAT_POST_BUCKET }}
        METRICS: ${{ secrets.SNS_UAT_METRICS }}
        GOVERNANCE_CANISTER_ID: ${{ secrets.SNS_UAT_GOVERNANCE_CANISTER_ID }}
        INDEX_CANISTER_ID: ${{ secrets.SNS_UAT_INDEX_CANISTER_ID }}
        LEDGER_CANISTER_ID: ${{ secrets.SNS_UAT_LEDGER_CANISTER_ID }}
        ROOT_CANISTER_ID: ${{ secrets.SNS_UAT_ROOT_CANISTER_ID }}
        SWAP_CANISTER_ID: ${{ secrets.SNS_UAT_SWAP_CANISTER_ID }}
    
    - name: Generate canister_ids.json in for NFTs and Publications
      run: |
        cd ./Nuance-NFTs-and-Publications
          wget https://github.com/dfinity/vessel/releases/download/v0.6.4/vessel-linux64
          mv vessel-linux64 vessel
          chmod +x vessel
          mv vessel /usr/local/bin/.
          vessel --version
          
        echo '{
          "NftFactory": {
            "ic": "'"$NFTFACTORY"'"
          },
          "PublicationManagement": {
            "ic": "'"$PUBLICATIONMANAGEMENT"'"
          },
          "Publisher": {
            "ic": "'"$PUBLISHER"'"
          }
        }' > canister_ids.json
      env:
        NFTFACTORY: ${{ secrets.SNS_UAT_NFTFACTORY }}
        PUBLICATIONMANAGEMENT: ${{ secrets.SNS_UAT_PUBLICATIONMANAGEMENT }}
        PUBLISHER: ${{ secrets.SNS_UAT_PUBLISHER }}

    - name: Create, Build and Proposal
      run: |
        echo "$SNS_UAT_PEM_FILE" | base64 --decode > identity.pem
        wasms="${{ github.event.inputs.canisterName }}"
        all_wasms=("CyclesDispenser" "FastBlocks_EmailOptIn" "KinicEndpoint" "PostCore" "PostIndex" "Storage" "User" "NftFactory" "PublicationManagement")
        
        if [[ $wasms == "all" ]]; then
          wasms="${all_wasms[@]}"
        fi
        canisterName=${{ github.event.inputs.canisterName }}
        network=${{ github.event.inputs.network }}
        title=${{ github.event.inputs.title }}
        url=${{ github.event.inputs.url }}
        summary=${{ github.event.inputs.summary }}
        
        for wasm in $wasms; do
          echo "Processing $wasm..."
          if [[ $wasm == "NftFactory" || $wasm == "PublicationManagement" ]]; then
            cd Nuance-NFTs-and-Publications
          fi
          dfx canister create $wasm
          dfx build $wasm --network $network
          if [[ $wasm == "NftFactory" || $wasm == "PublicationManagement" ]]; then
            cd ..
          fi
          node scripts/sns/CanisterUpgradeProposal.js --canisterName=$wasm --network=$network --title=$title --url=$url --summary=$summary --devNeuronId=$SNS_UAT_DEV_NEURON_ID --pemFilePath=./identity.pem
          sleep 30
        done
      env:
        SNS_UAT_PEM_FILE: ${{ secrets.SNS_UAT_PEM_FILE }}
        SNS_UAT_DEV_NEURON_ID: ${{ secrets.SNS_UAT_DEV_NEURON_ID }}
