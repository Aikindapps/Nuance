var minterSeed = '<seed phrase here>';

require = require('esm-wallaby')(module);
var fetch = require('node-fetch');

const bip39 = require('bip39');
const fs = require('fs');
const { promisify } = require('util');
const readFile = promisify(fs.readFile);

const Ed25519KeyIdentity = require('@dfinity/identity').Ed25519KeyIdentity;
const HttpAgent = require('@dfinity/agent').HttpAgent;
const Actor = require('@dfinity/agent').Actor;
const { UserIDL } = require('./User.did');

const { Principal } = require('@dfinity/principal');

const IS_LOCAL = false;
const USER_CANISTER_ID = 'wlam3-raaaa-aaaap-qpmaa-cai';

const mnemonicToId = (mnemonic) => {
  let seed = bip39.mnemonicToSeedSync(mnemonic);
  var seed_buffer = Array.from(seed);
  seed_buffer = seed_buffer.splice(0, 32);
  let seed_uint8 = new Uint8Array(seed_buffer);
  return Ed25519KeyIdentity.generate(seed_uint8);
};

async function getUserCanister() {
  const agent = new HttpAgent({
    identity: mnemonicToId(minterSeed),
    host: IS_LOCAL ? 'http://localhost:8080/' : 'https://icp-api.io',
  });

  if (IS_LOCAL) {
    agent.fetchRootKey().catch((err) => {
      console.warn(
        'Unable to fetch root key. Check to ensure that your local replica is running'
      );
      console.log(err);
    });
  }
  return Actor.createActor(UserIDL, {
    agent: agent,
    canisterId: USER_CANISTER_ID,
  });
}

(async () => {
  let userCanister = await getUserCanister();
  // register the user first
  let response = await userCanister.registerUser(
    'baran-hacker',
    'baran-hacker',
    ''
  );

  // log the user details
  let user = await userCanister.getUser();
  console.log('Here is the user details: ', user);

  // send 100 claim requests
  let promises = [];
  var counter = 0;
  while (counter < 100) {
    promises.push(userCanister.claimRestrictedTokens());
    counter += 1;
  }
  // execute them all at the same time
  let responses = await Promise.all(promises);
  console.log(responses);
})();
